What is Git?
Git is a distributed version control system used for tracking changes in source code during software development. It allows multiple developers to work on a project simultaneously without overwriting each other's changes.

Key Concepts
Repository (Repo): A directory that contains all the project files and the history of changes made to those files.
Commit: A snapshot of changes in the repository. Each commit has a unique ID and contains the changes, author information, and a commit message.
Branch: A separate line of development. The default branch is called main (or master in older projects).
Merge: Combining changes from one branch into another.
Clone: Creating a copy of an existing repository.
Pull: Fetching changes from a remote repository and merging them into your local repository.
Push: Sending your local commits to a remote repository.
Basic Git Commands
git init: Initializes a new Git repository.
git clone [url]: Clones a repository into a new directory.
git status: Shows the status of changes as untracked, modified, or staged.
git add [file]: Adds a file to the staging area.
git commit -m "[message]": Commits the staged changes with a message.
git log: Shows the commit history.
git branch: Lists all branches in the repository.
git checkout [branch-name]: Switches to the specified branch.
git merge [branch-name]: Merges the specified branch into the current branch.
git pull: Fetches changes from the remote repository and merges them into the current branch.
git push: Pushes local commits to the remote repository.
Advanced Git Commands
git fetch: Downloads objects and refs from another repository.
git rebase: Reapplies commits on top of another base tip.
git reset: Resets the current HEAD to a specified state.
git stash: Temporarily saves changes that are not ready to be committed.
git tag [tag-name]: Tags a specific commit with a simple, human-readable identifier.
git remote: Manages remote repository connections.
git diff: Shows the differences between commits, commit and working tree, etc.
Working with Branches
Creating a new branch: git branch [branch-name]
Switching to a branch: git checkout [branch-name]
Creating and switching to a branch: git checkout -b [branch-name]
Merging a branch: git merge [branch-name]
Deleting a branch: git branch -d [branch-name]
Collaboration with Git
Forking: Creating a personal copy of someone else's project.
Pull Request (PR): A request to merge your changes into the main project.
Review: Reviewing code changes before merging.
Git Configuration
git config --global user.name "[name]": Sets the name you want attached to your commit transactions.
git config --global user.email "[email]": Sets the email you want attached to your commit transactions.
git config --global core.editor [editor]: Sets the default text editor for Git.
Tips and Best Practices
Commit often: Make frequent, small commits with clear messages.
Branch often: Use branches to work on new features or fixes.
Merge regularly: Regularly merge changes from the main branch into your feature branches.
Write meaningful commit messages: Clearly explain what changes are made and why.
Git is a powerful tool, and these commands and practices form the foundation of using it effectively.

Anonymous
Git full commands
ChatGPT
ChatGPT
Here is a comprehensive list of Git commands:

Getting and Creating Projects
git init: Initialize a new Git repository.
git clone [url]: Clone a repository into a new directory.
Basic Snapshotting
git add [file]: Add a file to the staging area.
git add .: Add all files to the staging area.
git status: Show the working directory status.
git diff: Show changes between commits, commit and working tree, etc.
git commit -m "[message]": Commit the staged changes with a message.
git commit -a: Commit all the modified files to the repository.
git commit --amend: Amend the last commit.
git reset [file]: Unstage a file while retaining changes in the working directory.
git rm [file]: Remove a file from the working directory and the staging area.
git mv [old-file] [new-file]: Rename or move a file.
Branching and Merging
git branch: List all branches.
git branch [branch-name]: Create a new branch.
git checkout [branch-name]: Switch to a specified branch.
git checkout -b [branch-name]: Create and switch to a new branch.
git merge [branch-name]: Merge a branch into the active branch.
git branch -d [branch-name]: Delete a branch.
git branch -D [branch-name]: Force delete a branch.
Sharing and Updating Projects
git fetch [remote]: Download objects and refs from another repository.
git pull [remote]: Fetch and merge changes from the remote server to your working directory.
git push [remote] [branch]: Push your branch to the remote repository.
git remote -v: List all currently configured remote repositories.
git remote add [name] [url]: Add a remote repository.
git remote rm [name]: Remove a remote repository.
git remote set-url [name] [url]: Change the URL of a remote repository.
Inspecting and Comparing
git log: Show the commit history.
git log --oneline: Show the commit history in a compact form.
git show [commit]: Show various objects (commit, tree, blob, etc.).
git diff [branch-name]: Show changes between the working directory and the specified branch.
git diff [first-branch] [second-branch]: Show differences between two branches.
Undoing Changes
git revert [commit]: Create a new commit that undoes the changes from the specified commit.
git reset --hard [commit]: Reset the staging area and the working directory to match the specified commit.
git reset --soft [commit]: Reset the staging area to match the specified commit, but leave the working directory unchanged.
git reset --mixed [commit]: Reset the staging area to match the specified commit, but do not change the working directory.
Stashing and Cleaning
git stash: Stash the changes in a dirty working directory away.
git stash list: List all stashes.
git stash apply: Apply the changes from a stash to the working directory.
git stash drop: Remove a single stash from the list of stashes.
git clean -f: Remove untracked files from the working directory.
Rewriting History
git rebase [branch]: Reapply commits on top of another base tip.
git rebase -i [branch]: Interactive rebase (allows reordering, squashing, etc. of commits).
Tagging
git tag: List tags.
git tag [tag-name]: Create a new tag.
git tag -d [tag-name]: Delete a tag.
git push [remote] [tag-name]: Push a tag to the remote repository.
git push --tags: Push all tags to the remote repository.
Configuration
git config --global user.name "[name]": Set the name you want attached to your commit transactions.
git config --global user.email "[email]": Set the email you want attached to your commit transactions.
git config --global core.editor [editor]: Set the text editor for Git.
git config --global -l: List all global configurations.
Additional Commands
git archive: Create a tar or zip archive of files.
git bisect: Use binary search to find the commit that introduced a bug.
git blame [file]: Show what revision and author last modified each line of a file.
git cherry-pick [commit]: Apply the changes introduced by some existing commits.
git describe: Give an object a human-readable name based on an available reference.
git grep [text]: Print lines matching a pattern.
git reflog: Show a log of changes to the local repositoryâ€™s references.
This list covers a wide range of Git functionalities. Understanding these commands can help you efficiently manage and collaborate on projects using Git.

